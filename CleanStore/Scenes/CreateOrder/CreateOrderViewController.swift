//
//  CreateOrderViewController.swift
//  CleanStore
//
//  Created by Raymond Law on 8/22/15.
//  Copyright (c) 2015 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CreateOrderViewControllerInput
{
  func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel)
  func displayCreatedOrder(viewModel: CreateOrder.CreateOrder.ViewModel)
}

protocol CreateOrderViewControllerOutput
{
  var shippingMethods: [String] { get }
  func formatExpirationDate(request: CreateOrder.FormatExpirationDate.Request)
  func createOrder(request: CreateOrder.CreateOrder.Request)
}

class CreateOrderViewController: UITableViewController, CreateOrderViewControllerInput, UITextFieldDelegate, UIPickerViewDataSource, UIPickerViewDelegate
{
  var output: CreateOrderViewControllerOutput!
  var router: CreateOrderRouter!
  
  // MARK: - Object lifecycle
  
  override func awakeFromNib()
  {
    super.awakeFromNib()
    CreateOrderConfigurator.sharedInstance.configure(self)
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configurePickers()
  }
  
  // MARK: - Text fields
  
  @IBOutlet var textFields: [UITextField]!
  
  func textFieldShouldReturn(textField: UITextField) -> Bool
  {
    textField.resignFirstResponder()
    if let index = textFields.indexOf(textField) {
      if index < textFields.count - 1 {
        let nextTextField = textFields[index + 1]
        nextTextField.becomeFirstResponder()
      }
    }
    return true
  }
  
  override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath)
  {
    if let cell = tableView.cellForRowAtIndexPath(indexPath) {
      for textField in textFields {
        if textField.isDescendantOfView(cell) {
          textField.becomeFirstResponder()
        }
      }
    }
  }
  
  // MARK: - Shipping method
  
  @IBOutlet weak var shippingMethodTextField: UITextField!
  @IBOutlet var shippingMethodPicker: UIPickerView!
  
  func configurePickers()
  {
    shippingMethodTextField.inputView = shippingMethodPicker
    expirationDateTextField.inputView = expirationDatePicker
  }
  
  func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int
  {
    return 1
  }
  
  func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int
  {
    return output.shippingMethods.count
  }
  
  func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String?
  {
    return output.shippingMethods[row]
  }
  
  func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)
  {
    shippingMethodTextField.text = output.shippingMethods[row]
  }
  
  // MARK: - Expiration date
  
  @IBOutlet weak var expirationDateTextField: UITextField!
  @IBOutlet var expirationDatePicker: UIDatePicker!
  
  @IBAction func expirationDatePickerValueChanged(sender: AnyObject)
  {
    let date = expirationDatePicker.date
    let request = CreateOrder.FormatExpirationDate.Request(date: date)
    output.formatExpirationDate(request)
  }
  
  func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel)
  {
    let date = viewModel.date
    expirationDateTextField.text = date
  }
  
  // MARK: - Create order
  
  // MARK: Contact info
  @IBOutlet weak var firstNameTextField: UITextField!
  @IBOutlet weak var lastNameTextField: UITextField!
  @IBOutlet weak var phoneTextField: UITextField!
  @IBOutlet weak var emailTextField: UITextField!
  
  // MARK: Payment info
  @IBOutlet weak var billingAddressStreet1TextField: UITextField!
  @IBOutlet weak var billingAddressStreet2TextField: UITextField!
  @IBOutlet weak var billingAddressCityTextField: UITextField!
  @IBOutlet weak var billingAddressStateTextField: UITextField!
  @IBOutlet weak var billingAddressZIPTextField: UITextField!
  
  @IBOutlet weak var creditCardNumberTextField: UITextField!
  @IBOutlet weak var ccvTextField: UITextField!
  
  // MARK: Shipping info
  @IBOutlet weak var shipmentAddressStreet1TextField: UITextField!
  @IBOutlet weak var shipmentAddressStreet2TextField: UITextField!
  @IBOutlet weak var shipmentAddressCityTextField: UITextField!
  @IBOutlet weak var shipmentAddressStateTextField: UITextField!
  @IBOutlet weak var shipmentAddressZIPTextField: UITextField!
  
  @IBAction func saveButtonTapped(sender: AnyObject)
  {
    // MARK: Contact info
    let firstName = firstNameTextField.text!
    let lastName = lastNameTextField.text!
    let phone = phoneTextField.text!
    let email = emailTextField.text!
    
    // MARK: Payment info
    let billingAddressStreet1 = billingAddressStreet1TextField.text!
    let billingAddressStreet2 = billingAddressStreet2TextField.text!
    let billingAddressCity = billingAddressCityTextField.text!
    let billingAddressState = billingAddressStateTextField.text!
    let billingAddressZIP = billingAddressZIPTextField.text!
    
    let paymentMethodCreditCardNumber = creditCardNumberTextField.text!
    let paymentMethodExpirationDate = expirationDatePicker.date
    let paymentMethodCVV = ccvTextField.text!
    
    // MARK: Shipping info
    let shipmentAddressStreet1 = shipmentAddressStreet1TextField.text!
    let shipmentAddressStreet2 = shipmentAddressStreet2TextField.text!
    let shipmentAddressCity = shipmentAddressCityTextField.text!
    let shipmentAddressState = shipmentAddressStateTextField.text!
    let shipmentAddressZIP = shipmentAddressZIPTextField.text!
    
    let shipmentMethodSpeed = shippingMethodPicker.selectedRowInComponent(0)
    
    // MARK: Misc
    let id: String? = nil
    let date = NSDate()
    let total = NSDecimalNumber.notANumber()
    
    let request = CreateOrder.CreateOrder.Request(firstName: firstName, lastName: lastName, phone: phone, email: email, billingAddressStreet1: billingAddressStreet1, billingAddressStreet2: billingAddressStreet2, billingAddressCity: billingAddressCity, billingAddressState: billingAddressState, billingAddressZIP: billingAddressZIP, paymentMethodCreditCardNumber: paymentMethodCreditCardNumber, paymentMethodExpirationDate: paymentMethodExpirationDate, paymentMethodCVV: paymentMethodCVV, shipmentAddressStreet1: shipmentAddressStreet1, shipmentAddressStreet2: shipmentAddressStreet2, shipmentAddressCity: shipmentAddressCity, shipmentAddressState: shipmentAddressState, shipmentAddressZIP: shipmentAddressZIP, shipmentMethodSpeed: shipmentMethodSpeed, id: id, date: date, total: total)
    
    output.createOrder(request)
  }
  
  func displayCreatedOrder(viewModel: CreateOrder.CreateOrder.ViewModel)
  {
    if viewModel.success {
      router.navigateBackToListOrdersScene()
    } else {
      showCreateOrderFailureAlert()
    }
  }
  
  private func showCreateOrderFailureAlert()
  {
    let alertController = UIAlertController(title: "Failed to create order", message: "Please correct your order and submit again.", preferredStyle: .Alert)
    let alertAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
    alertController.addAction(alertAction)
    presentViewController(alertController, animated: true, completion: nil)
  }
}
